version: 2.1

commands:
  build_and_tests:
    parameters:
      cmake_flags:
        type: string
        default: ""
      suite_name:
        type: string
        default: "coverage"
    steps:
      - checkout
      - run:
          name: Make build directory
          command: mkdir build
      - run:
          name: CMake
          command: cmake -GNinja -DTARGET=virtual -DBUILD_SMALLBANK=OFF << parameters.cmake_flags >> ..
          working_directory: build
      - run:
          name: Ninja
          command: ninja -j4
          working_directory: build
      - run:
          name: Run tests
          working_directory: build
          command: ./tests.sh -VV --timeout 240 --no-compress-output -T Test
      - run:
          name: Extract test results
          working_directory: build
          command: |
            mkdir -p test-results/junit
            xsltproc --stringparam suiteName "<< parameters.suite_name >>" ../tests/infra/ctest_to_junit.xslt Testing/*/Test.xml > test-results/junit/results.xml
      - store_test_results:
          path: build/test-results

  gather_and_push_coverage:
    steps:
      - run:
          name: Push coverage
          command: ../tests/coverage/generate_coverage.sh
          working_directory: build

executors:
  small_1804:
    resource_class: small
    docker:
      - image: ccfciteam/ccf-ci-18.04:latest
  large_1804:
    resource_class: large
    docker:
      - image: ccfciteam/ccf-ci-18.04:latest

jobs:
  static_checks:
    executor: small_1804
    steps:
      - checkout
      - run:
          name: Shell Check
          command: find . -regex ".*\.sh$" | xargs shellcheck -s bash -e SC2044,SC2002,SC1091
      - run:
          name: Check copyright notices
          command: python3.7 notice-check.py
      - run:
          name: Check C++ code format
          command: ./check-format.sh src
      - run:
          name: Check Python code format
          command: |
            python3.7 -m venv env
            source env/bin/activate
            pip install black
            black --check sphinx/ tests/ notice-check.py

  build_coverage:
    executor: large_1804
    steps:
      - build_and_tests:
          cmake_flags: "-DCOVERAGE=ON"
      - gather_and_push_coverage

  build_san:
    executor: large_1804
    steps:
      - build_and_tests:
          cmake_flags: "-DSAN=ON"
          suite_name: "SAN"

workflows:
  ci:
    jobs:
      - static_checks
      - build_coverage
      - build_san